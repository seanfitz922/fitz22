; Sean Fitzgerald sef23d

; taken from hw2_2.clisp
(defun DLDFS (tree depth)
    (cond 
        ((atom tree) (if tree (list tree) '()))  ; check to see if leaf node, return as list
        ; ((atom tree) (list tree)) this works as well but leaves NIL's in output

        ((= depth 0) '()) ; stop at depth

        (t (append (DLDFS (car tree) (- depth 1)) (DLDFS (cdr tree) depth))) ; traverse left -> right through child nodes, and decrement depth

    ) 
)

(defun my_helper (tree max_depth current_depth)
  (if (> current_depth max_depth) '(); base case to check depth
    (append (DLDFS tree current_depth) (my_helper tree max_depth (+ current_depth 1))) ;Append results of DLDFS for the curr depth, recursively call my_helper with increm depth
  )
)

(defun DFID (tree max_depth)
  (my_helper tree max_depth 0))  ;  Start the depthfirstsearch from depth 0


;(print (DFID '((A (B)) C (D)) 3))